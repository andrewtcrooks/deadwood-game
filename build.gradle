// Groovy DSL
plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

// Project metadata
group = 'com.example'
version = '1.0-SNAPSHOT'

// Java version compatibility
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// JavaFX setup
javafx {
    version = "17.0.12"
    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.fxml' ]
}

// Repository configuration
repositories {
    mavenCentral()
}

// Dependencies (pulls from Maven Central)
dependencies {

    // JUnit test framework dependencies
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'

    // JavaFX dependencies
    implementation 'org.openjfx:javafx-controls:17.0.12'
    implementation 'org.openjfx:javafx-graphics:17'
    implementation 'org.openjfx:javafx-base:17'
    implementation 'org.openjfx:javafx-media:17'
    implementation 'org.openjfx:javafx-swing:17'
    implementation 'org.openjfx:javafx-web:17'
    implementation 'org.openjfx:javafx-fxml:17.0.12'

    // Gson library
    implementation 'com.google.code.gson:gson:2.10.1'
}

// Application configuration
application {
    mainClass = 'Deadwood'
    
    // VM options to include JavaFX modules
    applicationDefaultJvmArgs = [
        "--module-path", configurations.runtimeClasspath.asPath,
        '--add-modules', 'javafx.controls,javafx.fxml'
    ]
}

// Task to set up debugging for the application
tasks.withType(JavaExec) {
    if (project.hasProperty('debug')) {
        jvmArgs = [
            "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
        ]
    }
}

// Test configuration
test {
    useJUnitPlatform()
    
}

// Task to run the application
tasks.named('run', JavaExec) {
    standardInput = System.in
}

// Task to run the application with debugging enabled
task runWithDebug(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'Deadwood'  // Replace with your actual main class
    jvmArgs = [ // Enable debugging on port 5005
        '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'  
    ]
}

// Task to generate a .classpath file
task generateClasspath {
    doLast {
        // Collect all classpaths (source sets + dependencies)
        def classpathEntries = sourceSets.main.output.classesDirs.files +
                configurations.compileClasspath.files

        // Add parentheses around each classpath entry and join them into a single string
        def classpathString = classpathEntries.collect{"\"${it.absolutePath}\""}
                                              .join(File.pathSeparator)

        // Define the output file (.classpath)
        def classpathFile = file("$buildDir/.classpath")

        // Write the classpath string to the file
        classpathFile.text = classpathString
    }
}

build.finalizedBy(generateClasspath)